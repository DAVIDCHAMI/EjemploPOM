buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
            }
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:1.9.4"
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'org.sonarqube'
apply plugin: 'com.github.sherter.google-java-format'


// Configuraciones para Pruebas unitarias
sourceSets {
    unitTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/unit-test/java')
        }
        resources.srcDir file('src/unit-test/resources')
    }
}

configurations {
    unitTestCompile.extendsFrom testCompile
    unitTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven{
        url "https://artifactory.suramericana.com.co/artifactory/sura-share/"
    }
}

dependencies {
    compile group: 'net.serenity-bdd', name: 'serenity-core', version: '1.9.6'
    compile group: 'net.serenity-bdd', name: 'serenity-cucumber', version: '1.9.4'
    compile group: 'org.assertj', name: 'assertj-core', version: '1.7.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
    compile group: 'oracle', name:'ojdbc', version:'7'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    unitTestCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
}

sonarqube {
    properties {
        property "sonar.projectKey", "BDDCoreSuraEmpresariales"
        property "sonar.projectName", "BDDCoreSuraEmpresariales"
        property "sonar.projectVersion", "1.0"
        property "sonar.sources", "src/main"
        property "sonar.java.binaries", "build"
        property "sonar.test", "src/test"
    }
}

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

task icTest(type: Test) {
    def env = (System.getProperty('env') ?: "dllo").trim()
    def app = (System.getProperty('app') ?: "ejemplos").trim()
    def propertyValue = project.property("${app}TestFilter").toString().trim()
    def filterRute = "${propertyValue}.${env}.*"

    logger.lifecycle("Variables de ejecucion para icTest")
    logger.lifecycle("env:$env, app:$app, propertyValue:$propertyValue, filterRute:$filterRute")

    // Si ENV est√° vacio se hace el set en el valor por defecto
    systemProperties = ['ENV': env]

    filter {
        includeTestsMatching filterRute
        failOnNoMatchingTests = false
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
}

compileJava.dependsOn 'googleJavaFormat'
compileJava.mustRunAfter 'sonarqube'
gradle.startParameter.continueOnFailure = true

tasks.withType(Test) {
    systemProperties = System.properties
}

task unitTest(type: Test) {
    testClassesDir = sourceSets.unitTest.output.classesDir
    classpath = sourceSets.unitTest.runtimeClasspath
    outputs.upToDateWhen { false }
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
